1.select 3（切换数据库，一共16个数据库）
2.dbsize（查询数据库空间）
3.set key value
4.get key
5.keys *（查看所有的key）
6.flushall（清空全部数据库）
7.flushdb（清空当前数据库）
8.exists key（查看key是否存在）
9.move key db（从某个数据库移除key）
10.expire key second（设置key的过期时间）
11.ttl key（查询key的剩余时间，-2为过期，实现单点登录）
12.type key（查看类型）
13.append key v2（追加v2到value后）
14.strlen key（查看value的长度）
15.incr key（value++）
16.decr key（value--）
17.incrby key 10 （value+10）
18.decrby key 10（value-10）
19.getrange key fromIndex toIndex（查看value从fromIndex到toIndex）
19.getrange key 0 -1（获取整个value）
20.setrange key offset value2（将offset下标后的值置为value2）
21.setex key second value（设置k-v以及过期时间）
22.setnx key value（set k-v如果不存在）（分布式锁）
23.mset k1 v1 k2 v2 k3 v3（批量设置k-v对）
24.mget k1 k2 k3（批量获取k-v对）
25.msetnx k1 v1 k2 v2 k3 v3（原子操作，要么全部成功，要么全部失败）

26.getset key value（如果不存在则set，如果存在则取出原来的值然后重新set新的值）
127.0.0.1:6379> getset db redis
(nil)
127.0.0.1:6379> get db
"redis"
127.0.0.1:6379> getset db mysql
"redis"
127.0.0.1:6379> get db
"mysql"

27.lpust（从左插入） rpush（从右插入） lrange（从左查询）
127.0.0.1:6379> lpush list one two three
(integer) 3
127.0.0.1:6379> lrange list 0 3
1) "three"
2) "two"
3) "one"
127.0.0.1:6379> rpush list2 one two three
(integer) 3
127.0.0.1:6379> lrange list2 0 -1
1) "one"
2) "two"
3) "three"

28.lpop（从左弹出）rpop（从右弹出）
127.0.0.1:6379> lpop list
"three"
127.0.0.1:6379> rpop list2
"three"
127.0.0.1:6379> lrange list 0 -1
1) "two"
2) "one"
127.0.0.1:6379> lrange list2 0 -1
1) "one"
2) "two"

29.lindex（获取list下标的值）（生产者消费者模式）
127.0.0.1:6379> lindex list 0
"two"
127.0.0.1:6379> lindex list 1
"one"

30.llen list（返回列表长度）

31.lrem list 1 value （移除list中指定个数的value）
127.0.0.1:6379> lrange list 0 -1
1) "three"
2) "three"
3) "two"
4) "one"
127.0.0.1:6379> lrem list 1 three
(integer) 1
127.0.0.1:6379> lrange list 0 -1
1) "three"
2) "two"
3) "one"

32.ltrim（通过下标截取指定长度）
127.0.0.1:6379> lrange list3 0 -1
1) "hello1"
2) "hello2"
3) "hello3"
4) "hello4"
5) "hello5"
127.0.0.1:6379> ltrim list3 1 2
OK
127.0.0.1:6379> lrange list3 0 -1
1) "hello2"
2) "hello3"

33.移除列表中的最后一个值到新的列表中
127.0.0.1:6379> rpoplpush list3 list4
"hello3"
127.0.0.1:6379> lrange list3 0 -1
1) "hello2"
127.0.0.1:6379> lrange list4 0 -1
1) "hello3"

34.lset（将list中的某数组下的元素设置为某个值）
127.0.0.1:6379> exists list5
(integer) 0
127.0.0.1:6379> lset list5 0 item
(error) ERR no such key
127.0.0.1:6379> lpush list5 item
(integer) 1
127.0.0.1:6379> lrange list5 0 0
1) "item"
127.0.0.1:6379> lset list5 0 item2
OK
127.0.0.1:6379> lrange list5 0 0
1) "item2"
127.0.0.1:6379> lset list5 1 other
(error) ERR index out of range

35.linsert key BEFORE|AFTER pivot value （将某个具体值插入到列表中某个元素的前面或者后面，
如果有多个相同值，则插入到第一个值前面或后面）
127.0.0.1:6379> rpush list6 hello
(integer) 1
127.0.0.1:6379> rpush list6 world
(integer) 2
127.0.0.1:6379> lrange list6 0 -1
1) "hello"
2) "world"
127.0.0.1:6379> linsert list6 before world big
(integer) 3
127.0.0.1:6379> lrange list6 0 -1
1) "hello"
2) "big"
3) "world"
127.0.0.1:6379> rpush list7 hello hello hello hello
(integer) 4
127.0.0.1:6379> lrange list7 0 -1
1) "hello"
2) "hello"
3) "hello"
4) "hello"
127.0.0.1:6379> linsert list7 after hello world
(integer) 5
127.0.0.1:6379> lrange list7 0 -1
1) "hello"
2) "world"
3) "hello"
4) "hello"
5) "hello"

36.sadd（随机向set里添加元素）smembers（取出set的元素）
127.0.0.1:6379> sadd myset hello hello2 hello3 hello
(integer) 3
127.0.0.1:6379> smembers myset
1) "hello3"
2) "hello2"
3) "hello"

37.sismember （判断set中是否存在某个值）
127.0.0.1:6379> sismember myset hello
(integer) 1
127.0.0.1:6379> sismember myset test
(integer) 0

38.scard（获取set中的元素个数）
127.0.0.1:6379> scard myset
(integer) 3

39.srem（移除set中的某个元素）
127.0.0.1:6379> srem myset hello
(integer) 1
127.0.0.1:6379> smembers myset
1) "hello3"
2) "hello2"

40.srandmember set count （随机获取set中的元素，可指定个数）
127.0.0.1:6379> srandmember myset
"hello2"
127.0.0.1:6379> srandmember myset
"hello3"
127.0.0.1:6379> srandmember myset 2
1) "hello2"
2) "hello3"

41.spop（随机弹出一个元素）
127.0.0.1:6379> spop myset
"hello3"

42.smove（将一个元素从源set移动到目标set中）
127.0.0.1:6379> sadd myset1 hello big world
(integer) 3
127.0.0.1:6379> sadd myset2 small
(integer) 1
127.0.0.1:6379> smembers myset1
1) "world"
2) "big"
3) "hello"
127.0.0.1:6379> smembers myset2
1) "small"
127.0.0.1:6379> smove myset1 myset2 big
(integer) 1
127.0.0.1:6379> smembers myset1
1) "world"
2) "hello"
127.0.0.1:6379> smembers myset2
1) "big"
2) "small"

43.sdiff（差集）sinter（交集）sunion（并集）（共同好友，二度好友，推荐好友）
127.0.0.1:6379> sadd set1 a b c d
(integer) 4
127.0.0.1:6379> sadd set2 a b
(integer) 2
127.0.0.1:6379> sdiff set1 set2
1) "c"
2) "d"
127.0.0.1:6379> sinter set1 set2
1) "b"
2) "a"
127.0.0.1:6379> sunion set1 set2
1) "a"
2) "c"
3) "d"
4) "b"

44.hset（存储key map）hget（获取key mapkey对应的value）hmset（批量存储key map）hmget（批量获取key mapkey对应的value）hgetall（获取key对应的所有map键值对）
127.0.0.1:6379> hset myhash f1 hello
(integer) 1
127.0.0.1:6379> hget myhash f1
"hello"
127.0.0.1:6379> hget myhash f2
(nil)
127.0.0.1:6379> hmset myhash f1 hello f2 world
OK
127.0.0.1:6379> hmget myhash f1 f2
1) "hello"
2) "world"
127.0.0.1:6379> hmget myhash f1 f2 f3
1) "hello"
2) "world"
3) (nil)
127.0.0.1:6379> hgetall myhash
1) "f1"
2) "hello"
3) "f2"
4) "world"

45.hdel（删除key 中的mapkey）
127.0.0.1:6379> hdel myhash f1
(integer) 1
127.0.0.1:6379> hgetall myhash
1) "f2"
2) "world"

46.hlen（获取hash的k-v数量）
127.0.0.1:6379> hgetall myhash
1) "f2"
2) "world"
3) "f1"
4) "hello"
127.0.0.1:6379> hlen myhash
(integer) 2

47.hincrby（对hash中某个key的value++）
127.0.0.1:6379> hset myhash f3 5
(integer) 1
127.0.0.1:6379> hincrby myhash f3 1
(integer) 6
127.0.0.1:6379> hincrby myhash f3 -1
(integer) 5

48.hsetnx（判断某k-v是否存在，如果不存在则插入k-v，如果存在则不插入）
127.0.0.1:6379> hsetnx myhash f4 h4
(integer) 1

49.在set的基础上增加一个score值，zset k1 score v1
127.0.0.1:6379> zadd myzset 1 one
(integer) 1
127.0.0.1:6379> zadd myzset 2 two 3 three
(integer) 2
127.0.0.1:6379> zrange myzset 0 -1
1) "one"
2) "two"
3) "three"

50.zrangebyscore（排序）
127.0.0.1:6379> zrangebyscore myzset -inf +inf
1) "one"
2) "two"
3) "three"

51.zrangebyscore（排序并展示score）
127.0.0.1:6379> zrangebyscore myzset -inf +inf withscores
1) "one"
2) "1"
3) "two"
4) "2"
5) "three"
6) "3"

52.zrevrange（倒排）
127.0.0.1:6379> zrevrange myzset 0 2
1) "three"
2) "two"
3) "one"
127.0.0.1:6379> zrevrange myzset 0 2 withscores
1) "three"
2) "3"
3) "two"
4) "2"
5) "one"
6) "1"
127.0.0.1:6379> zrevrange myzset 0 -1
1) "three"
2) "two"

53.zrem（移除某个元素）
127.0.0.1:6379> zrange myzset 0 -1
1) "one"
2) "two"
3) "three"
127.0.0.1:6379> zrem myzset one
(integer) 1
127.0.0.1:6379> zrange myzset 0 -1
1) "two"
2) "three"

54.zcard（查看有几个元素）
127.0.0.1:6379> zcard myzset
(integer) 2

55.zcount（获取指定区间的元素数量，左闭右开）
127.0.0.1:6379> zadd myzset2 1 t1 1 t2 1 t3 2 t4 3 t5 4 t6
(integer) 6
127.0.0.1:6379> zrange myzset2 0 -1
1) "t1"
2) "t2"
3) "t3"
4) "t4"
5) "t5"
6) "t6"
127.0.0.1:6379> zrange myzset2 0 -1 withscores
 1) "t1"
 2) "1"
 3) "t2"
 4) "1"
 5) "t3"
 6) "1"
 7) "t4"
 8) "2"
 9) "t5"
10) "3"
11) "t6"
12) "4"
127.0.0.1:6379> zcount myzset2 1 3
(integer) 5

56.
